import planner.

final({[],_,_}) => true.

action({U,R,K},NState,Action,ActionCost),
    Result = true,
    w(W),
    foreach (J in U, break(Result == false))
        if R >= W[J] then
            Result := false
        end
    end,
    Result,
    select(I,U,NU),
    I >= K,
=>
    Action = I,
    ActionCost = 1,
    q(Q),
    NState = {NU,Q-W[I],K+1}.

action({U,R,K},NState,Action,ActionCost),
    select(I,U,NU),
    I >= K + 1,
    w(W),
    R >= W[I],
?=>
    Action = I,
    ActionCost = 0,
    NState = {NU,R-W[I],K}.

heuristic({U,R,_}) = H =>
    LB1 = lb1(U,R),
    LB2 = lb2(U,R),
    LB3 = lb3(U,R),
    H = max(max(LB1,LB2),LB3).

lb1(U,R) = LB =>
    q(Q),
    w(W),
    Sum = sum([W[I] : I in U]),
    LB = ceiling((Sum - R) / Q).

lb2(U,R) = LB =>
    q(Q),
    w(W),
    LB1 = 0,
    LB2 = 0,
    foreach (I in U)
        if W[I] > Q / 2 then
            LB1 := LB1 + 1
        elseif W[I] == Q / 2 then
            LB2 := LB2 + 0.5
        end
    end,
    LB = LB1 + ceiling(LB2),
    if R >= Q / 2 then
        LB := LB - 1
    end.

lb3(U,R) = LB =>
    q(Q),
    w(W),
    LB = 0,
    foreach (I in U)
        if W[I] > 2 * Q / 3 then
            LB := LB + 1
        elseif W[I] == 2 * Q / 3 then
            LB := LB + 0.666
        elseif W[I] > Q / 3 then
            LB := LB + 0.5
        elseif W[I] == Q / 3 then
            LB := LB + 0.333
        end
    end,
    LB := ceiling(LB),
    if R >= Q / 3 then
        LB := LB - 1
    end.

main(Args) =>
    [Filename|T] = Args,
    Reader = open(Filename),
    N = read_int(Reader),
    Q = read_int(Reader),

    W = new_array(N),
    foreach (I in 1..N)
        W[I] = read_int(Reader),
    end,

    close(Reader),

    cl_facts_table([$q(Q), $w(W)]),

    best_plan_bb({1..N,0,0},Plan,Cost),
    println(Plan),
    print("cost: "),
    println(Cost).
